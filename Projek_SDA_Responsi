import csv
from queue import Queue
import tkinter as tk
from tkinter import messagebox, filedialog
from tkinter import font as tkfont  

class Data:
    def __init__(self, id, uang, tanggal, deskripsi, jenis):
        self.id = id
        self.uang = uang
        self.tanggal = tanggal
        self.deskripsi = deskripsi
        self.jenis = jenis

    def __repr__(self):
        if self.jenis == "masuk":
            return f"{self.id}: Rp.{self.uang} || Tgl {self.tanggal} || Ket. {self.deskripsi}"
        else:
            return f"{self.id}: -Rp.{self.uang} || Tgl {self.tanggal} || Ket. {self.deskripsi}"

class DataManager:
    def __init__(self):
        self.datas = []
        self.counter = 1

    def tambah_data(self, uang, tanggal, deskripsi, jenis):
        new_data = Data(self.counter, uang, tanggal, deskripsi, jenis)
        self.datas.append(new_data)
        self.counter += 1
        print(f"'{uang}' berhasil ditambahkan.")

    def lihat_data(self):
        for data in sorted(self.datas, key=lambda x: (x.tanggal)):
            print(data)

    def cari_data(self, keyword):
        hasil = [
            data for data in self.datas
            if keyword.lower() in data.deskripsi.lower()
        ]
        return hasil

    def impor_data_csv(self, filename):
        try:
            with open(filename, mode='r') as file:
                csv_reader = csv.DictReader(file)
                for row in csv_reader:
                    # Determine jenis based on uang value
                    jenis = "masuk" if int(row['uang']) > 0 else "keluar"
                    # Pass the jenis argument to tambah_data
                    self.tambah_data(abs(int(row['uang'])), row['tanggal'], row['deskripsi'], jenis)
            print("Impor dari CSV berhasil.")
        except Exception as e:
            print(f"Error: {e}")

def show_gui():
    def tambah_data():
        uang = entry_uang.get()
        tanggal = entry_tanggal.get()
        deskripsi = entry_deskripsi.get()
        jenis = "masuk"  # Set the default jenis to "masuk"
        if uang[0] == "-":  # If the first character of uang is "-", set jenis to "keluar"
            uang = uang[1:]
            jenis = "keluar"

        if uang and tanggal and deskripsi:
            manager.tambah_data(uang, tanggal, deskripsi, jenis)
            messagebox.showinfo("Sukses", "Data berhasil ditambahkan!")
            lihat_data()  # Refresh data list after adding
            update_total_uang()  # Update total uang
        else:
            messagebox.showwarning("Peringatan", "Semua kolom harus diisi!")

    def lihat_data():
        output_text.delete('1.0', tk.END)
        datas = sorted(manager.datas, key=lambda x: (x.tanggal))
        for data in datas:
            output_text.insert(tk.END, f"{data}\n")

    def cari_data():
        keyword = entry_cari.get()
        hasil = manager.cari_data(keyword)
        output_text.delete('1.0', tk.END)
        if hasil:
            for data in hasil:
                output_text.insert(tk.END, f"{data}\n")
        else:
            output_text.insert(tk.END, "Data tidak ditemukan.")

    def hapus_data():
        try:
            pengeluaran = int(entry_hapus.get())
            tanggal_pengeluaran = entry_tanggal_hapus.get()
            deskripsi_pengeluaran = entry_deskripsi_hapus.get()
            if pengeluaran > 0:
                total_uang = sum(int(data.uang) for data in manager.datas)
                if total_uang >= pengeluaran:
                    manager.tambah_data(-pengeluaran, tanggal_pengeluaran, deskripsi_pengeluaran, "keluar")
                    messagebox.showinfo("Sukses", f"Pengeluaran sebesar {pengeluaran} berhasil!")
                    lihat_data()  # Refresh data list after deleting
                    update_total_uang()  # Update total uang
                    update_pengeluaran()  # Update pengeluaran output
                else:
                    messagebox.showerror("Error", "Pengeluaran melebihi total uang!")
            else:
                messagebox.showerror("Error", "Pengeluaran harus lebih besar dari 0!")
        except ValueError:
            messagebox.showerror("Error", "Pengeluaran harus berupa angka!")

def update_pengeluaran():
        pengeluaran_total = sum(int(data.uang) for data in manager.datas if int(data.uang) < 0)
        output_pengeluaran.delete('1.0', tk.END)
        output_pengeluaran.insert(tk.END, f"Rp.{pengeluaran_total}")

    def update_total_uang():
        total_uang = sum(int(data.uang) for data in manager.datas)
        output_total_uang.delete('1.0', tk.END)
        output_total_uang.insert(tk.END, f"Rp.{total_uang}")

    def update_data_popup():
        def update_data():
            try:
                id_data = int(entry_id_update.get())
                uang = entry_uang_update.get()
                tanggal = entry_tanggal_update.get()
                deskripsi = entry_deskripsi_update.get()
                manager.update_data(id_data, uang, tanggal, deskripsi)
                messagebox.showinfo("Sukses", f"Data dengan ID {id_data} berhasil diupdate!")
                lihat_data()  # Refresh data list after updating
                update_window.destroy()  # Close the update window
            except ValueError:
                messagebox.showerror("Error", "ID Data harus berupa angka.")

        update_window = tk.Toplevel(root)
        update_window.title("Update Data")
        update_window.configure(bg="#ededed")

        tk.Label(update_window, text="Update Data (ID):", bg="#ededed", fg="#ffffff").grid(row=0, column=0, padx=5, pady=5)
        entry_id_update = tk.Entry(update_window, bg="#ffffff", fg="#000000")
        entry_id_update.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(update_window, text="Uang:", bg="#ededed", fg="#ffffff").grid(row=1, column=0, padx=5, pady=5)
        entry_uang_update = tk.Entry(update_window, bg="#ffffff", fg="#000000")
        entry_uang_update.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(update_window, text="Tanggal:", bg="#ededed", fg="#ffffff").grid(row=2, column=0, padx=5, pady=5)
        entry_tanggal_update = tk.Entry(update_window, bg="#ffffff", fg="#000000")
        entry_tanggal_update.grid(row=2, column=1, padx=5, pady=5)

        tk.Label(update_window, text="Deskripsi:", bg="#ededed", fg="#ffffff").grid(row=4, column=0, padx=5, pady=5)
        entry_deskripsi_update = tk.Entry(update_window, bg="#ffffff", fg="#000000")
        entry_deskripsi_update.grid(row=4, column=1, padx=5, pady=5)

        tk.Button(update_window, text="Update", command=update_data, bg="#9BFF54", fg="#ffffff").grid(row=5, column=1, padx=5, pady=5)

def import_csv():
        filename = filedialog.askopenfilename(title="Pilih file CSV", filetypes=(("CSV files", ".csv"), ("All files", ".*")))
        if filename:
            try:
                with open(filename, mode='r') as file:
                    csv_reader = csv.DictReader(file)
                    for row in csv_reader:
                        # Determine jenis based on uang value
                        jenis = "masuk" if int(row['uang']) > 0 else "keluar"
                        # Pass the jenis argument to tambah_data
                        manager.tambah_data(int(row['uang']), row['tanggal'], row['deskripsi'], jenis)
                messagebox.showinfo("Sukses", "Impor dari CSV berhasil!")
                lihat_data()  # Refresh data list after import
            except Exception as e:
                messagebox.showerror("Error", str(e))

    def export_csv():
        filename = "transactions.csv"
        fieldnames = ['tanggal', 'deskripsi', 'uang']

        with open(filename, 'w', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            for data in manager.datas:
                writer.writerow({'tanggal': data.tanggal, 'deskripsi': data.deskripsi, 'uang': data.uang})

        messagebox.showinfo("Sukses", "Expor ke CSV berhasil!")
        lihat_data()  # Refresh data list after export

manager = DataManager()

    root = tk.Tk()
    root.title("Sistem Manajemen keuangan Pribadi")

    # Mengatur warna latar belakang
    root.configure(bg="#ededed")

    # Judul
    title_font = tkfont.Font(family="Montserrat", size=36, weight="bold")
    footer_font = tkfont.Font(family="Montserrat", size=8, weight="normal")

    title_label = tk.Label(root, text="Management Keuangan Pribadi", bg="#ededed", fg="#000", font=title_font)
    title_label.pack(pady=10)

    frame_input = tk.Frame(root, bg="#ededed")
    frame_input.pack(pady=10, fill=tk.X)

    tk.Label(frame_input, text="Jumlah Uang:     ", bg="#ededed", fg="#000").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
    entry_uang = tk.Entry(frame_input, bg="#ffffff", fg="#000000")
    entry_uang.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)

    tk.Label(frame_input, text="Tanggal:     ", bg="#ededed", fg="#000").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
    entry_tanggal = tk.Entry(frame_input, bg="#ffffff", fg="#000000")
    entry_tanggal.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)

    tk.Label(frame_input, text="Deskripsi:      ", bg="#ededed", fg="#000").grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)
    entry_deskripsi = tk.Entry(frame_input, bg="#ffffff", fg="#000000")
    entry_deskripsi.grid(row=3, column=1, padx=5, pady=5, sticky=tk.W)

    button_tambah = tk.Button(root, text="Tambah Data", command=tambah_data, bg="#B8FBFF", fg="#000000")
    button_tambah.place(x=250, y=110)

    button_tambah = tk.Button(root, text="Lihat Data", command=lihat_data, bg="#B8FBFF", fg="#000000")
    button_tambah.place(x=260, y=140)

    frame_cari = tk.Frame(root, bg="#ededed")
    frame_cari.pack(pady=10, fill=tk.X)

    tk.Label(frame_cari, text="Cari Data:            ", bg="#ededed", fg="#000").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
    entry_cari = tk.Entry(frame_cari, bg="#ffffff", fg="#000000")
    entry_cari.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)

    tk.Button(frame_cari, text="Cari", command=cari_data, bg="#B8FBFF", fg="#000000").grid(row=0, column=2, padx=5)

    button_import = tk.Button(root, text="Import dari CSV", command=import_csv, bg="#B8FBFF", fg="#000000")
    button_import.place(x=500, y=130)
    
    button_export = tk.Button(root, text="Export dari CSV", command=export_csv, bg="#B8FBFF", fg="#000000")
    button_export.place(x=501, y=170)

    frame_hapus = tk.Frame(root, bg="#ededed")
    frame_hapus.pack(pady=10, fill=tk.X)

    tk.Label(frame_hapus, text="Pengeluaran:      ", bg="#ededed", fg="#000").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
    entry_hapus = tk.Entry(frame_hapus, bg="#ffffff", fg="#000000")
    entry_hapus.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)

    tk.Label(frame_hapus, text="Tanggal:", bg="#ededed", fg="#000").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
    entry_tanggal_hapus = tk.Entry(frame_hapus, bg="#ffffff", fg="#000000")
    entry_tanggal_hapus.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)

    tk.Button(frame_hapus, text="Keluar", command=hapus_data, bg="#ff0000", fg="#000").grid(row=1, column=2, padx=5, pady=5)

    tk.Label(frame_hapus, text="Deskripsi:", bg="#ededed", fg="#000").grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
    entry_deskripsi_hapus = tk.Entry(frame_hapus, bg="#ffffff", fg="#000000")
    entry_deskripsi_hapus.grid(row=2, column=1, padx=5, pady=5, sticky=tk.W)

    tk.Button(root, text="Update Data", command=update_data_popup, bg="#9BFF54", fg="#000").pack(pady=5)

    output_text = tk.Text(root, height=10, width=65, bg="#ffffff", fg="#000000")
    output_text.pack(pady=10)

    frame_pengeluaran = tk.Frame(root, bg="#ededed")
    frame_pengeluaran.pack(pady=10)

    tk.Label(frame_pengeluaran, text="Total Pengeluaran:", bg="#ededed", fg="#000").grid(row=0, column=0, padx=5, pady=5)

    output_pengeluaran = tk.Text(root, height=1, width=20, bg="#ffffff", fg="#000000")
    output_pengeluaran.place(x=280, y=619)
    update_pengeluaran()

    frame_total = tk.Frame(root, bg="#ededed")
    frame_total.pack(pady=10, fill=tk.X)

    tk.Label(frame_total, text="Total Simpanan:", bg="#ededed", fg="#000").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)

    output_total_uang = tk.Text(root, height=1, width=20, bg="#ffffff", fg="#000000")
    output_total_uang.place(x=100, y=652) 
    update_total_uang()

    title_label = tk.Label(root, text="Kelompok 7 Responsi SDA", bg="#ededed", fg="#000", font=footer_font)
    title_label.pack(pady=0)

    root.mainloop()

show_gui()
